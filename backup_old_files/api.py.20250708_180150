from flask import request, jsonify
from flask_restful import Resource
from flask_jwt_extended import jwt_required, get_jwt_identity
from app.core.predictor import EquipmentReliabilityPredictor
import pandas as pd
import numpy as np


def make_json_serializable(obj):
    """Convert pandas/numpy objects to JSON serializable types"""
    if pd.isna(obj):
        return None
    elif hasattr(obj, 'isoformat'):  # datetime objects
        return obj.isoformat()
    elif hasattr(obj, 'item'):  # numpy types
        return obj.item()
    elif isinstance(obj, (pd.Timestamp, pd.Timedelta)):
        return str(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    else:
        return obj


class EquipmentReliabilityPredictorAPI(Resource):
    def __init__(self):
        # Don't initialize predictor for GET requests - it's not needed
        self.predictor = None
        self._predictor_initialized = False
    
    def _ensure_predictor(self):
        """Lazy initialization of predictor only when needed for predictions"""
        if not self._predictor_initialized:
            try:
                self.predictor = EquipmentReliabilityPredictor()
                print("EquipmentReliabilityPredictor initialized successfully")
                self._predictor_initialized = True
            except Exception as e:
                print(f"Error initializing EquipmentReliabilityPredictor: {str(e)}")
                import traceback
                traceback.print_exc()
                self.predictor = None
                self._predictor_initialized = True  # Mark as attempted
    
    def get(self):
        """Get API information and available endpoints"""
        return jsonify({
            "message": "Equipment Reliability Prediction API",
            "endpoints": {
                "POST /api/v1/predict": "Predict single equipment reliability",
                "POST /api/v1/predict-batch": "Predict batch of equipment reliability",
                "POST /api/v1/predict-file": "Predict from uploaded file"
            }
        })
    
    @jwt_required()
    def post(self):
        """Predict for a single equipment reliability assessment"""
        try:
            # Initialize predictor only when needed
            self._ensure_predictor()
            
            if self.predictor is None:
                return {"error": "Predictor not initialized properly"}, 500
                
            data = request.get_json()
            print(f"Received data: {data}")  # Debug logging
            
            if not data:
                return {"error": "No data provided"}, 400
            
            # Validate required fields
            required_fields = ["Num_equipement", "Systeme", "Description"]
            missing_fields = [field for field in required_fields if field not in data]
            if missing_fields:
                return {"error": f"Missing required fields: {missing_fields}"}, 400
            
            print(f"Making prediction for: {data}")  # Debug logging
            # Single prediction
            # Get prediction from the updated predictor (returns a dictionary)
            prediction = self.predictor.predict_single(data)
            print(f"Prediction result: {prediction}")  # Debug logging
            
            result = {
                "prediction": prediction,  # prediction is already a properly formatted dictionary
                "user_id": int(get_jwt_identity())
            }
            
            return result, 200
            
        except Exception as e:
            print(f"Error in predict endpoint: {str(e)}")  # Debug logging
            import traceback
            traceback.print_exc()  # Print full traceback
            return {"error": str(e)}, 500


class BatchEquipmentPredictorAPI(Resource):
    def __init__(self):
        self.predictor = EquipmentReliabilityPredictor()
    
    @jwt_required()
    def post(self):
        """Predict for multiple equipment reliability assessments in a single request"""
        try:
            data = request.get_json()
            
            if not data or 'equipments' not in data:
                return {"error": "No equipments data provided"}, 400
            
            equipments = data['equipments']
            if not isinstance(equipments, list):
                return {"error": "Equipments must be a list"}, 400
            
            # Get predictions from the updated predictor (returns list of dictionaries)
            predictions = self.predictor.predict_batch(equipments)
            
            results = []
            for i, prediction in enumerate(predictions):
                results.append({
                    "index": i,
                    "prediction": prediction  # prediction is already a properly formatted dictionary
                })
            
            return {
                "predictions": results,
                "user_id": int(get_jwt_identity())
            }, 200
            
        except Exception as e:
            return {"error": str(e)}, 500


class FileEquipmentPredictorAPI(Resource):
    def __init__(self):
        self.predictor = EquipmentReliabilityPredictor()
    
    @jwt_required()
    def post(self):
        """Predict equipment reliability from a CSV or Excel file"""
        try:
            data = request.get_json()
            
            if not data or 'file_path' not in data:
                return {"error": "No file_path provided"}, 400
            
            file_path = data['file_path']
            output_path = data.get('output_path', None)
            
            # Predict from file
            results_df = self.predictor.predict_from_file(file_path, output_path)
            
            # Calculate criticality for each row and update the DataFrame
            for i, row in results_df.iterrows():
                fiabilite = int(results_df.at[i, 'Fiabilité Intégrité_predicted'])
                disponibilite = int(results_df.at[i, 'Disponibilté_predicted'])
                process_safety = int(results_df.at[i, 'Process Safety_predicted'])
                criticity = fiabilite + disponibilite + process_safety
                results_df.at[i, 'Criticité_predicted'] = criticity
            
            # Save updated DataFrame with calculated criticality if output path provided
            if output_path:
                if output_path.endswith('.csv'):
                    results_df.to_csv(output_path, index=False)
                elif output_path.endswith(('.xlsx', '.xls')):
                    results_df.to_excel(output_path, index=False)
                else:
                    raise ValueError("Output file must be CSV or Excel format")
            
            # Convert DataFrame to dict, handling datetime and other non-serializable types
            results_dict = results_df.to_dict('records')
            
            # Convert any non-serializable objects to JSON-safe types
            for record in results_dict:
                for key, value in record.items():
                    record[key] = make_json_serializable(value)
            
            response = {
                "message": f"Processed {len(results_dict)} records",
                "results": results_dict[:10] if len(results_dict) > 10 else results_dict,  # Show first 10 for preview
                "total_records": len(results_dict),
                "user_id": int(get_jwt_identity())
            }
            
            if output_path:
                response["output_saved_to"] = output_path
            
            return response, 200
            
        except Exception as e:
            return {"error": str(e)}, 500


# Keep backward compatibility aliases
AnomalyPredictorAPI = EquipmentReliabilityPredictorAPI
BatchPredictorAPI = BatchEquipmentPredictorAPI
FilePredictorAPI = FileEquipmentPredictorAPI
