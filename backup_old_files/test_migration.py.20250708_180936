#!/usr/bin/env python3
"""
Test script to verify that the migrated application structure is working correctly
"""
import os
import sys
import importlib
from importlib import import_module

def check_structure():
    """Check the project structure for completeness"""
    required_dirs = [
        'app',
        'app/api',
        'app/api/v1',
        'app/api/v1/endpoints',
        'app/core',
        'app/models',
        'app/utils',
        'app/templates',
        'app/static',
    ]
    
    print("\n\033[1;34mChecking directory structure...\033[0m")
    missing_dirs = []
    for directory in required_dirs:
        if not os.path.exists(directory):
            missing_dirs.append(directory)
    
    if missing_dirs:
        print("\033[1;31mMissing directories:\033[0m")
        for directory in missing_dirs:
            print(f"  - {directory}")
    else:
        print("\033[1;32mAll required directories exist.\033[0m")

def check_modules():
    """Check if key modules can be imported"""
    print("\n\033[1;34mChecking module imports...\033[0m")
    
    modules_to_check = [
        'app',
        'app.models',
        'app.api',
        'app.api.v1.endpoints.auth',
        'app.api.v1.endpoints.anomalies',
        'app.api.v1.endpoints.predictions',
        'app.core.predictor',
        'app.core.browsable_api',
    ]
    
    missing_modules = []
    import_errors = []
    
    for module_name in modules_to_check:
        try:
            module = importlib.import_module(module_name)
            print(f"\033[1;32m✓ Successfully imported {module_name}\033[0m")
        except ImportError as e:
            missing_modules.append(module_name)
            import_errors.append(f"{module_name}: {str(e)}")
    
    if import_errors:
        print("\n\033[1;31mImport errors:\033[0m")
        for error in import_errors:
            print(f"  - {error}")

def check_run_py():
    """Check if run.py imports and runs correctly"""
    print("\n\033[1;34mChecking run.py...\033[0m")
    
    try:
        import run
        print("\033[1;32m✓ Successfully imported run.py\033[0m")
        
        try:
            if hasattr(run, 'app'):
                print("\033[1;32m✓ Application instance found in run.py\033[0m")
            else:
                print("\033[1;33m⚠ Application instance not found in run.py\033[0m")
        except Exception as e:
            print(f"\033[1;31m× Error checking app instance: {str(e)}\033[0m")
    
    except ImportError as e:
        print(f"\033[1;31m× Error importing run.py: {str(e)}\033[0m")

def check_missing_dependencies():
    """Check for missing Python dependencies"""
    print("\n\033[1;34mChecking for missing dependencies...\033[0m")
    
    dependencies = [
        'flask',
        'flask_sqlalchemy',
        'flask_restful',
        'flask_jwt_extended',
        'flask_bcrypt',
        'flask_cors',
    ]
    
    missing = []
    for dep in dependencies:
        try:
            importlib.import_module(dep)
        except ImportError:
            missing.append(dep)
    
    if missing:
        print("\033[1;31mMissing dependencies:\033[0m")
        for dep in missing:
            print(f"  - {dep}")
        print("\n\033[1;33mInstall missing dependencies with: pip install -r requirements.txt\033[0m")
    else:
        print("\033[1;32mAll core dependencies are installed.\033[0m")

def main():
    """Main test function"""
    print("\033[1;32m" + "=" * 80)
    print(" TAMS Project Migration Test ")
    print("=" * 80 + "\033[0m")
    
    # Add project root to Python path
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    check_structure()
    check_modules()
    check_run_py()
    check_missing_dependencies()
    
    print("\n\033[1;32m" + "=" * 80)
    print(" Test Complete ")
    print("=" * 80 + "\033[0m")
    
    print("\nRecommendations:")
    print("1. Fix any issues identified above")
    print("2. Make sure all import statements are updated correctly")
    print("3. Test running the application with 'python run.py'")
    print("4. Verify that the API endpoints work as expected")
    print("5. Once everything is working, you can remove old files from the root directory")

if __name__ == "__main__":
    main()
