get_anomalies:
  tags:
    - Anomalies
  summary: Get all anomalies for current user
  description: Retrieve all anomalies created by the current user with pagination
  produces:
    - application/json
  security:
    - Bearer: []
  parameters:
    - name: page
      in: query
      type: integer
      default: 1
      description: Page number for pagination
    - name: per_page
      in: query
      type: integer
      default: 20
      description: Number of items per page
  responses:
    200:
      description: Anomalies retrieved successfully
      schema:
        type: object
        properties:
          anomalies:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                num_equipement:
                  type: string
                systeme:
                  type: string
                description:
                  type: string
                date_detection:
                  type: string
                description_equipement:
                  type: string
                section_proprietaire:
                  type: string
                predictions:
                  type: object
                  properties:
                    fiabilite_integrite:
                      type: number
                    disponibilite:
                      type: number
                    process_safety:
                      type: number
                    criticite:
                      type: number
          pagination:
            type: object
            properties:
              page:
                type: integer
              per_page:
                type: integer
              total:
                type: integer
              pages:
                type: integer

create_anomaly:
  tags:
    - Anomalies
  summary: Create a new anomaly with prediction
  description: Create a new anomaly record and automatically generate predictions
  consumes:
    - application/json
  produces:
    - application/json
  security:
    - Bearer: []
  parameters:
    - name: anomaly_data
      in: body
      required: true
      schema:
        type: object
        properties:
          num_equipement:
            type: string
            example: "7d34d01e-6874-40c0-bbdc-77b8bc8ebba8"
          systeme:
            type: string
            example: "8ab799f5-144f-420c-b426-3d7e36b13f59"
          description:
            type: string
            example: "clapet du circuit de ramoange Réchauffeur d'air aprés la soupape 1430HCB10AA201 non étanche"
          date_detection:
            type: string
            example: "2019-01-01 10:09:10"
          description_equipement:
            type: string
            example: "Soupape"
          section_proprietaire:
            type: string
            example: "34MC"
        required:
          - num_equipement
          - systeme
          - description
          - date_detection
          - description_equipement
          - section_proprietaire
  responses:
    201:
      description: Anomaly created successfully
    400:
      description: Bad request

approve_anomaly:
  tags:
    - Anomalies
  summary: Approve anomaly predictions
  description: Mark the anomaly's predictions as approved
  produces:
    - application/json
  security:
    - Bearer: []
  parameters:
    - name: anomaly_id
      in: path
      required: true
      type: integer
      description: ID of the anomaly to approve
  responses:
    200:
      description: Anomaly approved successfully
      schema:
        type: object
        properties:
          message:
            type: string
            example: "Anomaly predictions approved successfully"
          anomaly:
            type: object
    404:
      description: Anomaly not found

edit_predictions:
  tags:
    - Anomalies
  summary: Edit anomaly predictions
  description: Manually edit the predictions for an anomaly (auto-approves)
  consumes:
    - application/json
  produces:
    - application/json
  security:
    - Bearer: []
  parameters:
    - name: anomaly_id
      in: path
      required: true
      type: integer
      description: ID of the anomaly to edit
    - name: predictions_data
      in: body
      required: true
      schema:
        type: object
        properties:
          predictions:
            type: object
            properties:
              fiabilite_integrite:
                type: number
                example: 85.5
              disponibilite:
                type: number
                example: 92.1
              process_safety:
                type: number
                example: 78.3
              criticite:
                type: number
                example: 255.9
  responses:
    200:
      description: Predictions updated successfully
    400:
      description: Bad request
    404:
      description: Anomaly not found
